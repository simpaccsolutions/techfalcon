resources:
  pipelines:
    - pipeline: bluefalcon # Name of the pipeline resource.
      source: simpaccsolutions.bluefalcon # The name of the pipeline referenced by this pipeline resource.
      project: SimpleAndAccurate # Required only if the source pipeline is in another project
      trigger: true # Run app-ci pipeline when any run of security-lib-ci completes
    - pipeline: greenfalcon # Name of the pipeline resource.
      source: simpaccsolutions.greenfalcon # The name of the pipeline referenced by this pipeline resource.
      project: SimpleAndAccurate # Required only if the source pipeline is in another project
      trigger: true # Run app-ci pipeline when any run of security-lib-ci completes

variables:
  - name: triggerBranch
    value: $[coalesce(resources.pipeline.bluefalcon.sourceBranch, resources.pipeline.greenfalcon.sourceBranch, variables['Build.SourceBranch'])]
  - name: triggerPipeline
    value: $[coalesce(resources.pipeline.bluefalcon.pipelineName, resources.pipeline.greenfalcon.pipelineName, 'direct')]
  - name: blueFalconBranch
    value: $[resources.pipeline.bluefalcon.sourceBranch]
  - name: greenFalconBranch
    value: $[resources.pipeline.greenfalcon.sourceBranch]

stages:
  - stage: Debug
    displayName: "Debug Information"
    jobs:
      - job: DebugJob
        displayName: "Debug Job"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - bash: |
              echo "=== DEBUG INFORMATION ==="
              echo "Build.SourceBranch: $(Build.SourceBranch)"
              echo "triggerBranch: $(triggerBranch)"
              echo "triggerPipeline: $(triggerPipeline)"
              echo "Build.Reason: $(Build.Reason)"
              echo "blueFalconBranch: $(blueFalconBranch)"
              echo "greenFalconBranch: $(greenFalconBranch)"
              echo "resources.pipeline.bluefalcon.sourceBranch: $(resources.pipeline.bluefalcon.sourceBranch)"
              echo "resources.pipeline.greenfalcon.sourceBranch: $(resources.pipeline.greenfalcon.sourceBranch)"
              echo "resources.pipeline.bluefalcon.runID: $(resources.pipeline.bluefalcon.runID)"
              echo "resources.pipeline.greenfalcon.runID: $(resources.pipeline.greenfalcon.runID)"

              # Determine which stage should run based on branch patterns
              BLUE_BRANCH="$(resources.pipeline.bluefalcon.sourceBranch)"
              GREEN_BRANCH="$(resources.pipeline.greenfalcon.sourceBranch)"

              echo "BLUE_BRANCH: $BLUE_BRANCH"
              echo "GREEN_BRANCH: $GREEN_BRANCH"

              # Check for test or prod branches
              if [[ "$BLUE_BRANCH" == refs/heads/test/* ]] || [[ "$BLUE_BRANCH" == refs/heads/prod/* ]] || [[ "$GREEN_BRANCH" == refs/heads/test/* ]] || [[ "$GREEN_BRANCH" == refs/heads/prod/* ]]; then
                echo "##vso[task.setvariable variable=shouldRunTest;isOutput=true]true"
                echo "Should run TEST stage"
              else
                echo "##vso[task.setvariable variable=shouldRunTest;isOutput=true]false"
                echo "Should NOT run TEST stage"
              fi

              # Check for prod branches only
              if [[ "$BLUE_BRANCH" == refs/heads/prod/* ]] || [[ "$GREEN_BRANCH" == refs/heads/prod/* ]]; then
                echo "##vso[task.setvariable variable=shouldRunProd;isOutput=true]true"
                echo "Should run PROD stage"
              else
                echo "##vso[task.setvariable variable=shouldRunProd;isOutput=true]false"
                echo "Should NOT run PROD stage"
              fi

              # Check for dev/main branches (and not test/prod)
              if ([[ "$BLUE_BRANCH" == "refs/heads/main" ]] || [[ "$BLUE_BRANCH" == refs/heads/dev/* ]] || [[ "$GREEN_BRANCH" == "refs/heads/main" ]] || [[ "$GREEN_BRANCH" == refs/heads/dev/* ]]) && \
                 ! ([[ "$BLUE_BRANCH" == refs/heads/test/* ]] || [[ "$BLUE_BRANCH" == refs/heads/prod/* ]] || [[ "$GREEN_BRANCH" == refs/heads/test/* ]] || [[ "$GREEN_BRANCH" == refs/heads/prod/* ]]); then
                echo "##vso[task.setvariable variable=shouldRunDev;isOutput=true]true"
                echo "Should run DEV stage"
              else
                echo "##vso[task.setvariable variable=shouldRunDev;isOutput=true]false"
                echo "Should NOT run DEV stage"
              fi

              echo "========================="
            displayName: "Print Debug Information"
            name: debugOutput

  - stage: Development
    displayName: "Development Environment"
    dependsOn: Debug
    condition: |
      and(
        succeeded(),
        eq(dependencies.Debug.outputs['debugOutput.shouldRunDev'], 'true')
      )
    jobs:
      - job: DevJob
        displayName: "Development Job"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - bash: |
              echo "Running in Development environment"
              echo "Triggered by pipeline: $(triggerPipeline)"
              echo "Triggered by branch: $(triggerBranch)"
            displayName: "Print Development Environment"

  - stage: Test
    displayName: "Test Environment"
    dependsOn: Debug
    condition: |
      and(
        succeeded(),
        eq(dependencies.Debug.outputs['debugOutput.shouldRunTest'], 'true')
      )
    jobs:
      - job: TestJob
        displayName: "Test Job"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - bash: |
              echo "Running in Test environment"
              echo "Triggered by pipeline: $(triggerPipeline)"
              echo "Triggered by branch: $(triggerBranch)"
            displayName: "Print Test Environment"

  - stage: Production
    displayName: "Production Environment"
    dependsOn: Test
    condition: |
      and(
        succeeded('Test'),
        eq(dependencies.Debug.outputs['debugOutput.shouldRunProd'], 'true')
      )
    jobs:
      - job: ProdJob
        displayName: "Production Job"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - bash: |
              echo "Running in Production environment"
              echo "Triggered by pipeline: $(triggerPipeline)"
              echo "Triggered by branch: $(triggerBranch)"
            displayName: "Print Production Environment"
